import random
import sqlite3 as sql

from datetime import *

from aiogram.types import InputFile

from db_help import User
import time
from keyboards import *
import os
import sqlite3 as sq
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import *
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Text
import keyboards
import json
import urllib.request
from aiogram.utils.exceptions import Throttled
import db_help
from datetime import datetime
import asyncio
import datetime
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import func
from glQiwiApi import QiwiP2PClient
from glQiwiApi.qiwi.clients.p2p.types import Bill
import os
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import ReplyKeyboardRemove
from db_help import add_balance, del_balance
from aiogram.types import CallbackQuery, Message
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

# ======

skin = 'Sm1014 serpent"' #–≤ –∫–∞–≤—ã—á–∫–∏ –≤–ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–Ω–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
x = 1316625002
y = '6434986644:AAER_Zp8kVo6AU1DxxLGT-PHAQvZ_iyseQQ'
TOKEN = "6434986644:AAER_Zp8kVo6AU1DxxLGT-PHAQvZ_iyseQQ"
adminid = 5094646092 #–≤–ø–∏—Å–∞—Ç—å –∞–π–¥–∏ –∞–¥–º–∏–Ω–∞
channel = '@Goblin_Gold_St_bot' #–≤ –∫–∞–≤—ã—á–∫–∏ –≤–ø–∏—Å–∞—Ç—å –∫–∞–Ω–∞–ª –±–æ—Ç–∞

otzivi = -1002024415136
bot_username = 'g_gold'


qiwi = "–ù–ï–î–û–°–¢–£–ü–ù–û"
sber = "<code>2202 2068 6554 1986</code>"
spb = "wrfw"
yoo = "<code>4100 1185 7084 1205</code>"
tink = "–ù–ï–î–û–°–¢–£–ü–ù–û"


# ======

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())

class Sender(StatesGroup):
    photo = State()
    text = State()
    video = State()

class UserState(StatesGroup):
    suma = State()
    vivod = State()
    screen = State()
    pay = State()
    otziv = State()

# ======
class GoldState(StatesGroup):
    amount_plus = State()
    user_id_plus = State()
    amount_minus = State()
    user_id_minus = State()

class StateMachine(StatesGroup):
    del_gold = State()
    give_gold = State()

class CoinFlip(StatesGroup):
    stake = State()
    choice = State()

class PaymentStates(StatesGroup):
    amount = State()
    payment_system = State()
    screenshot = State()

class SetGoldRate(StatesGroup):
    set_gold_rate = State()

class NewPromoState(StatesGroup):
    name = State()
    limit = State()
    gold = State()

class PromoCode(StatesGroup):
    EnterPromo = State()


db = sq.connect('users.db')
sql = db.cursor()


from aiogram.utils.deep_linking import get_start_link


# ======






#f = open('golds.txt','r')
#pricegold = str(*f)
apiqiwihelp = ""
qiwi_p2p_client = QiwiP2PClient(shim_server_url="play.nanix.fun:80", secret_p2p=apiqiwihelp)#–≤ –∫–∞–≤—ã—á–∫–∏ –≤–ø–∏—Å–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–∏–≤–∏ p2p –∫–ª—é—á –∫—É–ø–∏—Ç—å –º–æ–∂–Ω–æ @ms_shop_robot



sql.execute('''
    CREATE TABLE IF NOT EXISTS gold_transactions (
        user_id INTEGER,
        amount INTEGER,
        date TEXT
    )
''')

sql.execute('''
    CREATE TABLE IF NOT EXISTS profiles (
        id TEXT PRIMARY KEY,
        cash INTEGER DEFAULT 0,
        
        payment_system TEXT,
        amount INTEGER,
        screenshot BLOB
    )
''')

sql.execute('''create table if not exists user (
    id TEXT,
    name TEXT,
    referrals BIGINT,
    cash INTEGER,
    gold BIGINT,
    referral_code TEXT
    )
''')

sql.execute('''create table if not exists promocodes(
    name TEXT,
    promo_limit TEXT,
    gold TEXT
    )
''')

sql.execute('''create table if not exists used_promocodes(
    user_id TEXT,
    promo_name TEXT
    )
''')

sql.execute('''CREATE TABLE IF NOT EXISTS config1(
    min_withdraw TEXT DEFAULT '50',
    min_deposit TEXT DEFAULT '50'
    )
''')

db.commit()

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ config1
sql.execute('SELECT COUNT(*) FROM config1')
count = sql.fetchone()[0]

# –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞, —Ç–æ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
if count == 0:
    sql.execute("INSERT INTO config1 (min_withdraw, min_deposit) VALUES ('50', '50')")
    db.commit()



@dp.message_handler(commands=["start"])
async def command_start(message: types.Message):
    sql.execute('SELECT * FROM profiles WHERE id=?', (message.from_user.id,))
    profile = sql.fetchone()

    if profile is None:

        sql.execute('INSERT INTO profiles (id, cash) VALUES (?, 0)', (message.from_user.id,))
        db.commit()

        sql.execute('SELECT * FROM profiles WHERE id=?', (message.from_user.id,))
        profile = sql.fetchone()

    print(message.text[7:])

    if db_help.check_user(message.from_user.id) == None:
        await bot.send_sticker(message.from_user.id,
                               "CAACAgIAAxkBAAEE4E1mJN1ewYmGhky0b2Hri-O_tcojlwACSgIAAladvQrJasZoYBh68DQE")
        db_help.register_user(message.chat.id, message.from_user.first_name)
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(KeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—åüí∏"), KeyboardButton("–í—ã–≤–µ—Å—Ç–∏üçØ"))
        markup.row(KeyboardButton("–ö–∞–∑–∏–∫üé∞"), KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å‚öúÔ∏è"), KeyboardButton("–†–∞—Å—á—ë—Çüî¢"))
        markup.row(KeyboardButton("–ò–Ω—Ñ–æüí†"), KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞üë©üèº‚Äçüíª"))

        await bot.send_message(adminid, f"üîî –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\nüõ† ID [<code>{message.chat.id}</code> - @{message.from_user.username}]", parse_mode="HTML")
        await message.answer(f'‚úÖ <b>–ü—Ä–∏–≤–µ—Ç, —Ç—ã –ø–æ–ø–∞–ª –≤ –ª—É—á—à–∏–π –±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ –≥–æ–ª–¥—ã!\n–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!‚ù§Ô∏è \n\n‚ùóÔ∏è –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª, —Ç–∞–º –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ–Ω–∫—É—Ä—Å—ã - https://t.me/goldaotyakyza</b>', reply_markup=markup)

    elif message.from_user.id == adminid:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(KeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—åüí∏"), KeyboardButton("–í—ã–≤–µ—Å—Ç–∏üçØ"))
        markup.row(KeyboardButton("–ö–∞–∑–∏–∫üé∞"), KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å‚öúÔ∏è"), KeyboardButton("–†–∞—Å—á—ë—Çüî¢"))
        markup.row(KeyboardButton("–ò–Ω—Ñ–æüí†"), KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞üë©üèº‚Äçüíª"))
        markup.row(KeyboardButton("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"))
        await message.answer("–ê–¥–º–∏–Ω", reply_markup=markup)

    else:
        await bot.send_sticker(message.from_user.id, "CAACAgIAAxkBAAEE4E1mJN1ewYmGhky0b2Hri-O_tcojlwACSgIAAladvQrJasZoYBh68DQE")
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(KeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—åüí∏"), KeyboardButton("–í—ã–≤–µ—Å—Ç–∏üçØ"))
        markup.row(KeyboardButton("–ö–∞–∑–∏–∫üé∞"), KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å‚öúÔ∏è"), KeyboardButton("–†–∞—Å—á—ë—Çüî¢"))
        markup.row(KeyboardButton("–ò–Ω—Ñ–æüí†"), KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞üë©üèº‚Äçüíª"))
        await message.answer(f'‚úÖ <b>–ü—Ä–∏–≤–µ—Ç, —Ç—ã –ø–æ–ø–∞–ª –≤ –ª—É—á—à–∏–π –±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ –≥–æ–ª–¥—ã!\n–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!‚ù§Ô∏è \n\n‚ùóÔ∏è –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª, —Ç–∞–º –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ–Ω–∫—É—Ä—Å—ã - https://t.me/goldaotyakyza</b>', reply_markup=markup)

@dp.callback_query_handler(text='minvivod_setting')
async def min_withdraw_setting(call: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(call.id)
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    min_withdraw = sql.execute("SELECT min_withdraw FROM config1").fetchone()[0]
    await bot.send_message(call.from_user.id, f"–¢–µ–∫—É—â–µ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: {min_withdraw}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state('setting_min_withdraw')

@dp.callback_query_handler(text='mindep_setting')
async def min_deposit_setting(call: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(call.id)
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    min_deposit = sql.execute("SELECT min_deposit FROM config1").fetchone()[0]
    await bot.send_message(call.from_user.id, f"–¢–µ–∫—É—â–µ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {min_deposit}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state('setting_min_deposit')

@dp.message_handler(state='setting_min_withdraw')
async def set_min_withdraw(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    min_withdraw = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    sql.execute("UPDATE config1 SET min_withdraw = ?", (min_withdraw,))
    db.commit()

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.finish()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    await bot.send_message(message.from_user.id, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {min_withdraw}")

@dp.message_handler(state='setting_min_deposit')
async def set_min_deposit(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    min_deposit = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    sql.execute("UPDATE config1 SET min_deposit = ?", (min_deposit,))
    db.commit()

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.finish()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    await bot.send_message(message.from_user.id, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {min_deposit}")

@dp.message_handler(text='–†–∞—Å—á—ë—Çüî¢')
async def get_profile(message: types.Message,  state: FSMContext):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(KeyboardButton("–ü–æ—Å—á–∏—Ç–∞—Ç—å ‚ÇΩ –≤ –≥–æ–ª–¥–µ‚≠êÔ∏è"), KeyboardButton("–ü–æ—Å—á–∏—Ç–∞—Ç—å –≥–æ–ª–¥—É –≤ ‚ÇΩ‚≠êÔ∏è"))
    markup.row(KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè°"))
    await message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ ‚§µÔ∏è</b>", reply_markup=markup)


@dp.message_handler(text='–ü–æ—Å—á–∏—Ç–∞—Ç—å –≥–æ–ª–¥—É –≤ ‚ÇΩ‚≠êÔ∏è')
async def get_profile(message: types.Message,  state: FSMContext):
    price_gold = float(db_help.goldsc()[1])
    await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–¥—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∏ —è –≤–∞–º —Å–∫–∞–∂—É —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å:</b>", reply_markup=keyboards.exitmenu())
    await state.set_state("gold_amount")

@dp.message_handler(state="gold_amount")
async def calculate_gold_price(message: types.Message, state: FSMContext):

    gold_amount = message.text
    price_gold = float(db_help.goldsc()[1])
    if not str.isdigit(gold_amount):
        await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á–∏—Å–ª–æ</b>", reply_markup=keyboards.exitmenu())
        return
    else:
        gold_amount = float(gold_amount)
        total_price = gold_amount * price_gold
        await message.answer(f"<b>{gold_amount} –≥–æ–ª–¥—ã –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å {total_price} ‚ÇΩ.</b>", reply_markup=keyboards.markup_main())
    await state.finish()

@dp.message_handler(text='–ü–æ—Å—á–∏—Ç–∞—Ç—å ‚ÇΩ –≤ –≥–æ–ª–¥–µ‚≠êÔ∏è')
async def get_profile(message: types.Message,  state: FSMContext):
    price_gold = float(db_help.goldsc()[1])
    await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä—É–±–ª–µ–π –∏ —è —Å–∫–∞–∂—É, —Å–∫–æ–ª—å–∫–æ –≥–æ–ª–¥—ã –º–æ–∂–Ω–æ –Ω–∞ –Ω–µ–µ –∫—É–ø–∏—Ç—å:</b>", reply_markup=keyboards.exitmenu())
    await state.set_state("rub_amount")

@dp.message_handler(state="rub_amount")
async def calculate_gold_price(message: types.Message, state: FSMContext):

    rub_amount = message.text
    price_gold = float(db_help.goldsc()[1])
    if not str.isdigit(rub_amount):
        await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á–∏—Å–ª–æ</b>", reply_markup=keyboards.exitmenu())
        return
    else:
        gold_amount = float(rub_amount)
        total_price = gold_amount / price_gold
        await message.answer(f"<b>–ó–∞ {rub_amount} ‚ÇΩ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å {total_price} –≥–æ–ª–¥—ã</b>", reply_markup=keyboards.markup_main())
    await state.finish()

@dp.message_handler(commands=["course"])
async def course(message: types.Message):
    pricegold = float(db_help.goldsc()[1])
    ponprice = pricegold
    await message.answer(f"ü•á <b>–ö—É—Ä—Å –≥–æ–ª–¥—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç - {ponprice} ‚ÇΩ –∑–∞ 1 –≥–æ–ª–¥—É</b>", parse_mode="HTML")



@dp.message_handler(text='–ö–∞–∑–∏–∫üé∞')
async def games(message: types.Message):
    def games_key():
        # —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        markup.add(KeyboardButton(text="–û—Ä–µ–ª –∏ –†–µ—à–∫–∞‚òîÔ∏è"), KeyboardButton(text="–ö–µ–π—Å—ãüßú‚Äç‚ôÄÔ∏è"), KeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè°"))
        return markup

    text = '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ —Å—ã–≥—Ä–∞—Ç—å –≤ –Ω–∞—à–∏ –º–∏–Ω–∏-–∏–≥—Ä—ã!'
    await message.answer(text, reply_markup=games_key())
    
@dp.message_handler(text="–û—Ä–µ–ª –∏ –†–µ—à–∫–∞‚òîÔ∏è")
async def coin_flip(message: types.Message, state: FSMContext):
    user_info = db_help.check_user(message.from_user.id)
    if user_info:
        
        text = '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å:'
        await message.answer(text, reply_markup=keyboards.exitmenu())
                 
        await CoinFlip.stake.set()
    else:
        await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å /start')

@dp.message_handler(state=CoinFlip.stake)
async def get_stake(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    
    if message.text.isdigit():
        stake = int(message.text)
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_data = sql.execute(f"SELECT cash FROM user WHERE id = '{user_id}'").fetchone()
        user_cash = user_data[0]

        if stake > user_cash:
            await message.answer("–°—Ç–∞–≤–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å.")
            return

        await state.update_data(stake=stake)
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞:'
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton(text='–û—Ä–µ–ª', callback_data='heads'),
            InlineKeyboardButton(text='–†–µ—à–∫–∞', callback_data='tails')
        )
        await message.answer(text, reply_markup=markup)
        await CoinFlip.choice.set()
    else:
        text = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º'
        await message.answer(text)

@dp.callback_query_handler(state=CoinFlip.choice)
async def get_choice(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    stake = data.get('stake')
    if callback_query.data == 'heads':
        coin = random.choices(['heads', 'tails'], weights=(3, 7), k=1)[0] # –∏–∑–º–µ–Ω–µ–Ω –≤–µ—Å –Ω–∞ (3, 7)
        if coin == 'heads':
            winnings = stake * 2
            text = f'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings}!\n–†–µ–∑—É–ª—å—Ç–∞—Ç: –æ—Ä–µ–ª'
            db_help.add_balance(callback_query.from_user.id, winnings)
        else:
            text = f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {stake} :( \n–†–µ–∑—É–ª—å—Ç–∞—Ç: —Ä–µ—à–∫–∞'
            db_help.del_balance(callback_query.from_user.id, stake)
    elif callback_query.data == 'tails':
        coin = random.choices(['heads', 'tails'], weights=(7, 3), k=1)[0] # –∏–∑–º–µ–Ω–µ–Ω –≤–µ—Å –Ω–∞ (7, 3)
        if coin == 'tails':
            winnings = stake * 2
            text = f'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings}!\n–†–µ–∑—É–ª—å—Ç–∞—Ç: —Ä–µ—à–∫–∞'
            db_help.add_balance(callback_query.from_user.id, winnings)
        else:
            text = f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {stake} :( \n–†–µ–∑—É–ª—å—Ç–∞—Ç: –æ—Ä–µ–ª'
            db_help.del_balance(callback_query.from_user.id, stake)
    else:
        text = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä'
    await callback_query.message.answer(text, reply_markup=keyboards.markup_main())
    await state.finish()

@dp.message_handler(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè°')
@dp.message_handler(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè°', state='*')
async def go_back(message: types.Message, state: FSMContext):
    await state.finish()
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(KeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—åüí∏"), KeyboardButton("–í—ã–≤–µ—Å—Ç–∏üçØ"))
    markup.row(KeyboardButton("–ö–∞–∑–∏–∫üé∞"), KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å‚öúÔ∏è"), KeyboardButton("–†–∞—Å—á—ë—Çüî¢"))
    markup.row(KeyboardButton("–ò–Ω—Ñ–æüí†"), KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞üë©üèº‚Äçüíª"))
    await bot.send_message(message.chat.id, '<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥</b>', reply_markup=markup)


@dp.message_handler(text='–ò–Ω—Ñ–æüí†')
async def info(message: types.Message):
    markup = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton('üí≠ –ß–∞—Ç', url="https://t.me/goblin_st_chat")
    btn2 = InlineKeyboardButton('üìä –ö–∞–Ω–∞–ª', url="https://t.me/goldaotyakyza")
    btn3 = InlineKeyboardButton('üß° –û—Ç–∑—ã–≤—ã', url="https://t.me/goblin_st_chat")
    btn4 = InlineKeyboardButton('üé°–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ', url="https://t.me/shadowrazow")
    btn5 = InlineKeyboardButton('üìâ –ö—É—Ä—Å', callback_data='course')
    btn6 = InlineKeyboardButton('–¢–æ–ø –¥–Ω—è', callback_data='top_day')
    btn7 = InlineKeyboardButton('–¢–æ–ø –Ω–µ–¥–µ–ª–∏', callback_data='top_week')
    btn8 = InlineKeyboardButton('–¢–æ–ø –º–µ—Å—è—Ü–∞', callback_data='top_month')
    markup.row(btn2)
    markup.row(btn3)
    markup.row(btn4)
    markup.row(btn5)
    markup.row(btn6, btn7, btn8)
    photo = InputFile("info.jpg")
    await bot.send_photo(message.from_user.id, photo, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç:', reply_markup=markup)


@dp.callback_query_handler(text='course')
async def top_week(callback_query: types.CallbackQuery):


    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–ø-5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    pricegold = float(db_help.goldsc()[1])
    ponprice = pricegold * 100

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø-5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
    await bot.answer_callback_query(callback_query.id, text=f'ü•á –ö—É—Ä—Å –≥–æ–ª–¥—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç - {ponprice} —Ä—É–±–ª–µ–π –∑–∞ 100 –≥–æ–ª–¥—ã', show_alert=True)
    

@dp.callback_query_handler(text='top_day')
async def top_day(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ 5 —Å–∞–º—ã—Ö –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    sql.execute('''
                SELECT user_id, amount
                FROM gold_transactions
                WHERE date >= datetime('now', '-1 day')
                ORDER BY amount DESC
                LIMIT 5
                ''')
    top_transactions = sql.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–ø-5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    message_text = '–¢–æ–ø-5 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –ø–æ–∫—É–ø–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:\n\n'
    for i, transaction in enumerate(top_transactions, start=1):
        message_text += f'{i}. {transaction[1]:.2f} –≥–æ–ª–¥—ã\n'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø-5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
    await bot.answer_callback_query(callback_query.id, text=f'{message_text}', show_alert=True)

@dp.callback_query_handler(text='top_week')
async def top_week(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ 5 —Å–∞–º—ã—Ö –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    sql.execute('''
                SELECT user_id, amount
                FROM gold_transactions
                WHERE date >= datetime('now', '-7 days')
                ORDER BY amount DESC
                LIMIT 5
                ''')
    top_transactions = sql.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–ø-5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    message_text = '–¢–æ–ø-5 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –ø–æ–∫—É–ø–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:\n\n'
    for i, transaction in enumerate(top_transactions, start=1):
        message_text += f'{i}. {transaction[1]:.2f} –≥–æ–ª–¥—ã\n'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø-5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
    await bot.answer_callback_query(callback_query.id, text=f'{message_text}', show_alert=True)
    
@dp.callback_query_handler(text='top_month')
async def top_month(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ 5 —Å–∞–º—ã—Ö –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    sql.execute('''
                SELECT user_id, amount
                FROM gold_transactions
                WHERE date >= datetime('now', '-30 days')
                ORDER BY amount DESC
                LIMIT 5
                ''')
    top_transactions = sql.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–ø-5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    message_text = '–¢–æ–ø-5 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –ø–æ–∫—É–ø–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:\n\n'
    for i, transaction in enumerate(top_transactions, start=1):
        message_text += f'{i}. {transaction[1]:.2f} –≥–æ–ª–¥—ã\n'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø-5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
    await bot.answer_callback_query(callback_query.id, text=f'{message_text}', show_alert=True)

@dp.message_handler(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—åüí∏')
async def test(message: types.Message):
    cash = sql.execute("SELECT cash FROM user WHERE id == '{key}'".format(key=message.from_user.id)).fetchone()
    user = User(message.from_user.id)
    min_deposit = sql.execute("SELECT min_deposit FROM config1").fetchone()[0]
    await message.answer(f"üí´", reply_markup=keyboards.exitmenu())

    await bot.send_message(message.from_user.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É\n–¢–µ–∫—É—â–µ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {min_deposit}",
                           reply_markup=get_payment_systems_keyboard())

@dp.message_handler(text='–ü—Ä–æ—Ñ–∏–ª—å‚öúÔ∏è')
async def get_profile(message: types.Message):
    user = User(message.from_user.id)
    markup = InlineKeyboardMarkup(row_width=1)
    photo = InputFile("profile.jpg")

    time_str = time.strftime("%m/%d/%Y, %H:%M:%S")

    await bot.send_photo(message.from_user.id, photo,f"<b>‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å\n\n‚î£ üÜî ID - {message.from_user.id}\n‚î£ üêù –ù–∏–∫: @{message.from_user.username}\n"
                                                 f"‚î£ ‚è∞ –í—Ä–µ–º—è –≤ –±–æ—Ç–µ: {time_str}\n"
                                                 f"‚îó üçØ –ë–∞–ª–∞–Ω—Å G - {user.cash}</b>", reply_markup=markup.add(InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥üéÅ", callback_data="promo"), InlineKeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞üé®", callback_data="reff")))

@dp.callback_query_handler(lambda c: c.data == 'reff')
async def process_reff_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_name = callback_query.message.from_user.username
    bot_username = 'g_gold_bot'
    referals = db_help.get_referrals
    referral_link = f"https://t.me/{bot_username}?start={user_id}"
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton(text="‚ùå", callback_data="exit"))
    await bot.send_message(
        callback_query.from_user.id,
        text="üçª –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
             "üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ –≤–∞—à–∏–º –¥—Ä—É–∑—å—è–º. –ï—Å–ª–∏ –í–∞—à –¥—Ä—É–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∫—É–ø–∏—Ç —É –Ω–∞—Å –≥–æ–ª–¥—É, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å –µ–≥–æ –ø–æ–∫—É–ø–æ–∫!"
             "\n\nüöÄ–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—èüöÄ"
             f"\n<code>{referral_link}</code>",

    )
    await callback_query.answer()

@dp.message_handler(text='–ö–µ–π—Å—ãüßú‚Äç‚ôÄÔ∏è')
async def case_menu(message: types.Message):
    user = User(message.from_user.id)
    await message.answer(f"<b>–ë–∞–ª–∞–Ω—Å - {user.cash} üçØ</b>", reply_markup=markup_main())
    markup = InlineKeyboardMarkup(row_width=1)
    novice_case_button = InlineKeyboardButton('–ö–µ–π—Å | –ù–æ–≤–∏—á–æ–∫ ü™≠ | 20 G', callback_data='novice_case')
    master_case_button = InlineKeyboardButton('–ö–µ–π—Å | –ê—Ä–∫–∞–Ω–æ–≤—ã–π üåü | 120 G', callback_data='arkan_case')
    easy_knife_button = InlineKeyboardButton('–ö–µ–π—Å | –ò–∑–∏ –Ω–æ–∂ üèÜ | 490 G', callback_data='easy_knife')
    markup.add( novice_case_button, master_case_button, easy_knife_button)
    photo = InputFile("case.jpg")
    await bot.send_photo(message.from_user.id, photo, '<b>–í—ã–±–µ—Ä–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –∫–µ–π—Å‚§µÔ∏è</b>', parse_mode="HTML", reply_markup=markup)




@dp.callback_query_handler(lambda c: c.data in ['novice_case', 'arkan_case', 'easy_knife'])
async def process_case(callback_query: types.CallbackQuery):
    user = User(callback_query.from_user.id)
    case = {}
    if callback_query.data == 'novice_case':
        case['title'] = '–ù–æ–≤–∏—á–æ–∫ ü™≠'
        case['items'] = [
            {'name': 'Awm Dragon', 'price': 35},
            {'name': 'Akr Carbon', 'price': 20},
            {'name': 'Glock', 'price': 10},
            {'name': 'M4', 'price': 10},
        ]
        case['price'] = 20
    elif callback_query.data == 'easy_knife':
        case['title'] = '–ò–∑–∏ –Ω–æ–∂ üèÜ'
        case['items'] = [
            {'name': 'AKR ¬´Tag King¬ª', 'price': 278},
            {'name': 'SM1014 ¬´Freezing¬ª', 'price': 315},
            {'name': 'UMP4 White Carbon', 'price': 330},
            {'name': 'M4A1 ¬´Bubblegum¬ª', 'price': 350},
            {'name': 'AKR ¬´Dragon¬ª', 'price': 377},
            {'name': 'AWM ¬´Stickerbomb¬ª', 'price': 392},
            {'name': 'P350 ¬´Forest Spirit¬ª', 'price': 422},
            {'name': 'AWM ¬´Genesis¬ª', 'price': 550},
            {'name': 'Kukri ¬´Digital Burst¬ª', 'price': 728},
            {'name': 'Tanto ¬´Glitch¬ª', 'price': 780},
            {'name': 'Fang ¬´Aureate¬ª', 'price': 1698},
        ]
        case['price'] = 490
    else:
        case['title'] = '–ê—Ä–∫–∞–Ω–æ–≤—ã–π üåü'
        case['items'] = [
            {'name': 'üéñUSP Purple Camo', 'price': 15},
            {'name': 'üéñM4 Lizard', 'price': 30},
            {'name': 'üéñP350 Neon', 'price': 50},
            {'name': 'üéñDeagle ¬´Venator¬ª', 'price': 95},
            {'name': 'üéñFabM ¬´Boom¬ª', 'price': 103},
            {'name': 'üéñM4 ¬´Samurai¬ª', 'price': 120},
            {'name': 'Tanto ¬´Glitch¬ª', 'price': 780},
        ]
        case['price'] = 120
    items_text = '\n'.join([f"{i + 1}. {item['name']} - {item['price']}G" for i, item in enumerate(case['items'])])

    markup = InlineKeyboardMarkup(row_width=2)
    back_button = InlineKeyboardButton('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè°', callback_data='back')
    buy_button = InlineKeyboardButton('üí∞ –ö—É–ø–∏—Ç—å', callback_data=f'buy_case_{callback_query.data}')
    markup.add(back_button, buy_button)
    await callback_query.answer()
    await callback_query.message.answer(
        f"üéÅ –ö–µ–π—Å ¬´{case['title']}¬ª \n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {case['price']} G\n\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–µ–π—Å–∞:\n{items_text}\n", reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data in ['back'])
async def cancel_case(callback_query: types.CallbackQuery):
    markup = InlineKeyboardMarkup(row_width=1)
    novice_case_button = InlineKeyboardButton('–ö–µ–π—Å | –ù–æ–≤–∏—á–æ–∫ ü™≠ | 20 G', callback_data='buy_case_novice_case')
    master_case_button = InlineKeyboardButton('–ö–µ–π—Å | –ê—Ä–∫–∞–Ω–æ–≤—ã–π üåü | 120 G', callback_data='buy_case_arkan_case')
    easy_knife_button = InlineKeyboardButton('–ö–µ–π—Å | –ò–∑–∏ –Ω–æ–∂ üèÜ| 490 G', callback_data='buy_case_easy_knife')
    markup.add( novice_case_button, master_case_button, easy_knife_button)
    await callback_query.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å—ã:', reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data.startswith('buy_case_'))
async def buy_case(callback_query: types.CallbackQuery):
    case_type = callback_query.data.split('_')[-1]
    user = User(callback_query.from_user.id)
    case = {}
    if callback_query.data == 'buy_case_novice_case':
        case['title'] = '–ù–æ–≤–∏—á–æ–∫ ü™≠'
        case['items'] = [
            {'name': 'Awm Dragon', 'price': 35},
            {'name': 'Akr Carbon', 'price': 20},
            {'name': 'Glock', 'price': 10},
            {'name': 'M4', 'price': 10},
        ]
        case['price'] = 20
    elif callback_query.data == 'buy_case_easy_knife':
        case['title'] = '–ò–∑–∏ –Ω–æ–∂ üèÜ'
        case['items'] = [
            {'name': 'AKR ¬´Tag King¬ª', 'price': 278},
            {'name': 'SM1014 ¬´Freezing¬ª', 'price': 315},
            {'name': 'UMP4 White Carbon', 'price': 330},
            {'name': 'M4A1 ¬´Bubblegum¬ª', 'price': 350},
            {'name': 'AKR ¬´Dragon¬ª', 'price': 377},
            {'name': 'AWM ¬´Stickerbomb¬ª', 'price': 392},
            {'name': 'P350 ¬´Forest Spirit¬ª', 'price': 422},
            {'name': 'AWM ¬´Genesis¬ª', 'price': 550},
            {'name': 'Kukri ¬´Digital Burst¬ª', 'price': 728},
            {'name': 'Tanto ¬´Glitch¬ª', 'price': 780},
            {'name': 'Fang ¬´Aureate¬ª', 'price': 1698},
        ]
        case['price'] = 490
    else:
        case['title'] = '–ê—Ä–∫–∞–Ω–æ–≤—ã–π üåü'
        case['items'] = [
            {'name': 'üéñUSP Purple Camo', 'price': 15},
            {'name': 'üéñM4 Lizard', 'price': 30},
            {'name': 'üéñP350 Neon', 'price': 50},
            {'name': 'üéñDeagle ¬´Venator¬ª', 'price': 95},
            {'name': 'üéñFabM ¬´Boom¬ª', 'price': 103},
            {'name': 'üéñM4 ¬´Samurai¬ª', 'price': 120},
            {'name': 'Tanto ¬´Glitch¬ª', 'price': 780},
        ]
        case['price'] = 120
    if user.cash >= case['price']:
        item = random.choice(case['items'])
        del_balance(callback_query.from_user.id, case['price'])
        add_balance(callback_query.from_user.id, item['price'])
        await callback_query.answer('üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º')
        await callback_query.message.reply(f"üéä <b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {item['name']} –∑–∞ {item['price']} G. –ì–æ–ª–¥–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!</b>", parse_mode="HTML")
        await callback_query.answer()
    else:
        await callback_query.answer('–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å')
        await callback_query.message.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ')


@dp.message_handler(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—åüí∏')
async def buy_gold(message: types.Message):
    user = User(message.from_user.id)
    price_gold = float(db_help.goldsc()[1])
    await message.answer(
        f"<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –≥–æ–ª–¥—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n\n–í–∞—à –±–∞–ª–∞–Ω—Å - {user.cash} üçØ\n\n–ö—É—Ä—Å –≥–æ–ª–¥—ã - {price_gold} —Ä—É–±–ª–µ–π –∑–∞ 1 –≥–æ–ª–¥—É</b>",
        reply_markup=keyboards.exitmenu())
    await UserState.suma.set()


@dp.message_handler(text='–í—ã–≤–µ—Å—Ç–∏üçØ')
async def withdraw_gold(message: types.Message):
    user = User(message.from_user.id)
    await message.answer(
        f"<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –≥–æ–ª–¥—ã –¥–ª—è –≤—ã–≤–æ–¥–∞\n\n–í–∞—à –±–∞–ª–∞–Ω—Å - {user.cash} üçØ</b>",
        reply_markup=keyboards.exitmenu())
    await UserState.vivod.set()


@dp.message_handler(text='–û—Ç–∑—ã–≤—ã‚ú®')
async def withdraw_gold(message: types.Message):
    await message.answer("<b>‚¨áÔ∏è –ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã</b>", reply_markup=keyboards.otzivi_key())
    

@dp.message_handler(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞üë©üèº‚Äçüíª")
async def support_handler(message: types.Message):
    photo = InputFile("supp_t.jpg")
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton(text="1", callback_data="1"), InlineKeyboardButton(text='2', callback_data="2"), InlineKeyboardButton(text='3', callback_data="3"))
    markup.row(InlineKeyboardButton(text="4", callback_data="4"), InlineKeyboardButton(text="5", callback_data="5"), InlineKeyboardButton(text="6", callback_data="6"))
    markup.row(InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', url='https://t.me/official_supp_t'))
    await bot.send_photo(message.from_user.id, photo,
        f"üë©üèº‚Äçüíª <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n<em>1. –°–∫–æ–ª—å–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–≤–æ–¥—è—Ç –≥–æ–ª–¥—É?\n"
        f"2. –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ —É –≤–∞—Å –ø–æ–∫—É–ø–∞—Ç—å? \n3. –ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–¥—ã? \n4. –ú–æ–≥—É –ª–∏ —è –ø—Ä–æ–¥–∞—Ç—å –≤–∞–º –≥–æ–ª–¥—É? \n"
        f"5. –£ –º–µ–Ω—è –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–∫–∏–Ω–∞ –Ω–∞ –≤—ã–≤–æ–¥, —á—Ç–æ –¥–µ–ª–∞—Ç—å? \n"
        f"6. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∞ –æ–ø–ª–∞—Ç—ã?\n\nüí° –ü—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, "
        f"—É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∑–¥–µ—Å—å –Ω–µ—Ç—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å</em>", parse_mode="HTML",
        reply_markup=markup)


@dp.callback_query_handler(text="1")
async def one(call: types.CallbackQuery):
    await call.message.delete()
    await call.answer()
    markup = InlineKeyboardMarkup(row_width=1)
    markup.row(InlineKeyboardButton(text='‚óÄÔ∏è–ù–∞–∑–∞–¥', callback_data='back_ans'))
    await call.message.answer("<b>1. –°–∫–æ–ª—å–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–≤–æ–¥—è—Ç –≥–æ–ª–¥—É?\n\n"
                              "–û—Ç–≤–µ—Ç: –ì–æ–ª–¥—É –≤—ã–≤–æ–¥—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —á–∞—Å–æ–≤.</b>", parse_mode="HTML", reply_markup=markup)

@dp.callback_query_handler(text="2")
async def two(call: types.CallbackQuery):
    await call.message.delete()
    await call.answer()
    markup = InlineKeyboardMarkup(row_width=1)
    markup.row(InlineKeyboardButton(text='‚óÄÔ∏è–ù–∞–∑–∞–¥', callback_data='back_ans'))
    await call.message.answer("<b>2. –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ —É –≤–∞—Å –ø–æ–∫—É–ø–∞—Ç—å?\n\n–û—Ç–≤–µ—Ç: –£ –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ç–∑—ã–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å!"
                              "\n\n–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–æ, –≤–æ –≤—Ä–µ–º—è –∏ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n\n"
                              "–í–µ—Å—å —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–∞—ë—Ç—Å—è –≤ –±–æ—Ç–µ, –ø–æ–ª—É—á–µ–Ω —á–µ—Å—Ç–Ω—ã–º –ø—É—Ç—ë–º. –ï—Å–ª–∏ –≤—ã —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Ç–æ –ª—É—á—à–µ –ø–æ–∫—É–ø–∞—Ç—å –≤ –∏–≥—Ä–µ.</b>", parse_mode="HTML", reply_markup=markup)


@dp.callback_query_handler(text="3")
async def three(call: types.CallbackQuery):
    await call.message.delete()
    await call.answer()
    markup = InlineKeyboardMarkup(row_width=1)
    markup.row(InlineKeyboardButton(text='‚óÄÔ∏è–ù–∞–∑–∞–¥', callback_data='back_ans'))
    await call.message.answer(f"<b>3. –ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–¥—ã?\n\n–û—Ç–≤–µ—Ç: –ú—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ—Å–∏–º –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. "
                              f"–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–¥—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–π —Ä—ã–Ω–æ–∫.\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≥–æ–ª–¥—ã –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ, "
                              f"–í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å–∫–∏–Ω {skin} —Å Pattern –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.\n\n"
                              f"–î–∞–ª–µ–µ –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–µ–¥—ë—Ç –ø–æ–∫—É–ø–∫—É –≤–∞—à–µ–≥–æ —Å–∫–∏–Ω–∞!</b>", parse_mode="HTML", reply_markup=markup)


@dp.callback_query_handler(text="4")
async def four(call: types.CallbackQuery):
    await call.message.delete()
    await call.answer()
    markup = InlineKeyboardMarkup(row_width=1)
    markup.row(InlineKeyboardButton(text='‚óÄÔ∏è–ù–∞–∑–∞–¥', callback_data='back_ans'))
    markup.row(InlineKeyboardButton(text='ü™∏–ü—Ä–æ–¥–∞—Ç—å –≥–æ–ª–¥—É', url='https://t.me/shadowrazow'))
    await call.message.answer("<b>4. –ú–æ–≥—É –ª–∏ —è –ø—Ä–æ–¥–∞—Ç—å –≤–∞–º –≥–æ–ª–¥—É?\n\n"
                              "–û—Ç–≤–µ—Ç: –î–∞! –ï—Å–ª–∏ –≤—ã —É—Ö–æ–¥–∏—Ç–µ –∏–∑ –∏–≥—Ä—ã –∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å —Å–∫–∏–Ω—ã –∏–ª–∏ –≥–æ–ª–¥–∞, —Ç–æ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –µ—ë –Ω–∞–º –ø–æ –∫—É—Ä—Å—É 0,45.\n\n"
                              "–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –Ω–∞–ø–∏—Å–∞—Ç—å –∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞.</b>", parse_mode="HTML", reply_markup=markup)

@dp.callback_query_handler(text="5")
async def five(call: types.CallbackQuery):
    await call.message.delete()
    await call.answer()
    markup = InlineKeyboardMarkup(row_width=1)
    markup.row(InlineKeyboardButton(text='‚óÄÔ∏è–ù–∞–∑–∞–¥', callback_data='back_ans'))
    await call.message.answer("<b>5. –£ –º–µ–Ω—è –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–∫–∏–Ω–∞ –Ω–∞ –≤—ã–≤–æ–¥?\n\n"
                              "–û—Ç–≤–µ—Ç: –ï—Å–ª–∏ —É –í–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–∫–∏–Ω–∞ –∏–ª–∏ —É –í–∞—Å –≤–æ–æ–±—â–µ –ø—É—Å—Ç–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å. "
                              "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ 100G –∑–∞ 150‚ÇΩ –ø–æ id –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –≤ –ü–æ–¥–¥–µ—Ä–∂–∫—É. "
                              "–ò–ª–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–∫–æ–ø–∏—Ç—å –≥–æ–ª–¥—É –Ω–∞ –ø–æ–∫—É–ø–∫—É —Å–∫–∏–Ω–∞.</b>", parse_mode="HTML", reply_markup=markup)


@dp.callback_query_handler(text="6")
async def six(call: types.CallbackQuery):
    await call.message.delete()
    await call.answer()
    markup = InlineKeyboardMarkup(row_width=1)
    markup.row(InlineKeyboardButton(text='‚óÄÔ∏è–ù–∞–∑–∞–¥', callback_data='back_ans'))
    await call.message.answer("<b>6. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∞ –æ–ø–ª–∞—Ç—ã?\n\n"
                              "–û—Ç–≤–µ—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤. –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ.</b>", parse_mode="HTML", reply_markup=markup)







@dp.callback_query_handler(text="back_ans")
async def back_ans(call: types.CallbackQuery):
    await call.answer()
    await call.message.delete()
    photo = InputFile("supp_t.jpg")
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton(text="1", callback_data="1"), InlineKeyboardButton(text='2', callback_data="2"),
               InlineKeyboardButton(text='3', callback_data="3"))
    markup.row(InlineKeyboardButton(text="4", callback_data="4"), InlineKeyboardButton(text="5", callback_data="5"),
               InlineKeyboardButton(text="6", callback_data="6"))
    markup.row(InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', url='https://t.me/official_supp_t'))
    await bot.send_photo(call.from_user.id, photo,
                         f"üë©üèº‚Äçüíª <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n<em>1. –°–∫–æ–ª—å–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–≤–æ–¥—è—Ç –≥–æ–ª–¥—É?\n"
                         f"2. –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ —É –≤–∞—Å –ø–æ–∫—É–ø–∞—Ç—å? \n3. –ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–¥—ã? \n4. –ú–æ–≥—É –ª–∏ —è –ø—Ä–æ–¥–∞—Ç—å –≤–∞–º –≥–æ–ª–¥—É? \n"
                         f"5. –£ –º–µ–Ω—è –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–∫–∏–Ω–∞ –Ω–∞ –≤—ã–≤–æ–¥, —á—Ç–æ –¥–µ–ª–∞—Ç—å? \n"
                         f"6. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∞ –æ–ø–ª–∞—Ç—ã?\n\nüí° –ü—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, "
                         f"—É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∑–¥–µ—Å—å –Ω–µ—Ç—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å</em>", parse_mode="HTML",
                         reply_markup=markup)



back_markup = types.InlineKeyboardMarkup()
back_markup.add(types.InlineKeyboardButton(text="‚ùå", callback_data="back"))


#@dp.callback_query_handler(text="back", state="*")
#async def go_to_main_menu(call: types.CallbackQuery, state: FSMContext):
 #   user = User(call.from_user.id)
 #   await call.message.edit_text(f'‚úÖ <b>–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!‚ù§Ô∏è \n\n‚ùóÔ∏è –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª, —Ç–∞–º –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ–Ω–∫—É—Ä—Å—ã - {channel}</b>', reply_markup=keyboards.markup_main())
 #   await state.finish()

@dp.callback_query_handler(text="exit")
async def test(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text(
        f'‚úÖ <b>–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!‚ù§Ô∏è \n\n‚ùóÔ∏è –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª, —Ç–∞–º –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ–Ω–∫—É—Ä—Å—ã - {channel}</b>',
        reply_markup=keyboards.markup_main())


@dp.message_handler(content_types=["photo"], state=UserState.screen)
async def golda(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await message.photo[-1].download("screen.jpg")
    photo = InputFile("screen.jpg")
    markup = InlineKeyboardMarkup(row_width=1)
    markup.row(InlineKeyboardButton(text="‚úÖ", callback_data=f"a_{message.from_user.id}"))
    await bot.send_photo(chat_id=adminid, photo=photo,
                         caption=f'–í—ã–≤–æ–¥ –≥–æ–ª–¥—ã {data["golds"]} –≥–æ–ª–¥—ã\n\nID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - <code>{data["ids"]}</code>',
                         parse_mode="HTML",
                         reply_markup=markup)
    await message.answer('<b>–û–∂–∏–¥–∞–π—Ç–µ –≤—ã–≤–æ–¥, –≤–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ‚ù§Ô∏è</b>', reply_markup=keyboards.markup_main())
    await state.finish()

@dp.callback_query_handler(text_startswith="a_")
async def test(call: types.CallbackQuery):
    ids = call.data.split('_')[1]
    markup = InlineKeyboardMarkup(row_width=1)
    markup.row(InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="otziiv"))
    await bot.send_message(ids, f"‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–≤–æ–¥ –≥–æ–ª–¥—ã. –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</b>",
                           parse_mode="HTML",
                           reply_markup=markup)
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)


@dp.callback_query_handler(text="otziiv")
async def test(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.message_id, 
                                text="–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞", 
                                reply_markup=None)
    await UserState.otziv.set()

	

@dp.callback_query_handler(text="golds")
async def test(call: types.CallbackQuery):
    pricegold = float(db_help.goldsc()[1])
    ponprice = pricegold * 100
    await call.message.edit_text(f"<b>ü•á –ö—É—Ä—Å –≥–æ–ª–¥—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç - {ponprice} —Ä—É–±–ª–µ–π –∑–∞ 100 –≥–æ–ª–¥—ã</b>", reply_markup=keyboards.exitmenu())


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ —Ñ–∞–π–ª–∞
def get_order_number():
    if os.path.exists('orders.txt'): # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        with open('orders.txt', 'r') as f:
            order_number = int(f.read())
    else: # –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å 1
        order_number = 1
    return order_number

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –≤ —Ñ–∞–π–ª
def save_order_number(order_number):
    with open('orders.txt', 'w') as f:
        f.write(str(order_number))

@dp.message_handler(state=UserState.otziv)
async def get_otziv(message: types.Message, state: FSMContext):
    data = await state.get_data()
    order_number = get_order_number()  # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç–∑—ã–≤–∞
    otziv_text = f"{message.from_user.first_name}: {message.text}"  # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
    otziv_date = message.date.strftime('%d.%m.%Y')  # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ—Ç–∑—ã–≤–∞ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    otziv_message = (f"<b>‚ú®–û—Ç–∑—ã–≤ ‚Ññ{order_number}‚ú®\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å - @{message.from_user.username}\nID - {message.from_user.id}"
                     f"</b>\n\n{otziv_text}\n\n–í—ã–≤–µ–ª {otziv_date}")  # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.send_message(otzivi, otziv_message)  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª otzivi
    await message.reply('<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!üî±</b>', reply_markup=keyboards.markup_main())  # –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    order_number += 1
    save_order_number(order_number)
    await state.finish()  # –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSMContext


def get_payment_systems_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("üü©–°–±–µ—Ä–±–∞–Ω–∫", callback_data="payment_system:sber"),
        types.InlineKeyboardButton("üü®–¢–∏–Ω—å–∫–æ—Ñ—Ñ", callback_data="payment_system:tink"),
        types.InlineKeyboardButton("üü¶–û–∑–æ–Ω–±–∞–Ω–∫", callback_data="payment_system:ozon"),
    )
    return keyboard

z = 2202206201150625
sber = "<code>2202 2068 6337 5825</code>"
spb = "wrfw"
yoo = "<code>4100 1181 1260 2897</code>"
tink = "<code>2200 7010 7709 4586</code>"
ozon = "<code>2204 2401 7926 4744</code>"


@dp.callback_query_handler(lambda c: c.data.startswith('payment_system'))
async def process_payment_system(callback_query: types.CallbackQuery, state: FSMContext):


    payment_system = callback_query.data.split(':')[1]

    await bot.answer_callback_query(callback_query.id)

    await state.update_data(payment_system=payment_system)

    if payment_system == "qiwi":
        await bot.send_message(callback_query.from_user.id, f"<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã Qiwi:</b> {qiwi}")
    if payment_system == "ozon":
        await bot.send_message(callback_query.from_user.id, f"<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –û–∑–æ–Ω–±–∞–Ω–∫:</b> <code>{ozon}</code>")
    if payment_system == "tink":
        await bot.send_message(callback_query.from_user.id, f"<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –¢–∏–Ω—å–∫–æ—Ñ—Ñ:</b> <code>{tink}</code>")
    if payment_system == "sber":
        await bot.send_message(callback_query.from_user.id,
                               f"<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –°–±–µ—Ä–ë–∞–Ω–∫:</b> <code>{sber}</code>",
                               reply_markup=keyboards.exitmenu())
    if payment_system == "yoomey":
        await bot.send_message(callback_query.from_user.id,
                               f"<b>–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ YooMoney  –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> <code>{yoo}</code>",
                               reply_markup=keyboards.exitmenu())

    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>",
                           reply_markup=keyboards.exitmenu())
    await PaymentStates.amount.set()


@dp.message_handler(state=PaymentStates.amount)
async def process_amount(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    amount = int(message.text)
    # Retrieve the minimum deposit value from the database
    min_deposit = sql.execute("SELECT min_deposit FROM config1").fetchone()[0]

    # Check if the deposit amount is less than the minimum deposit value
    if amount < int(min_deposit):
        await state.finish()
        await bot.send_message(message.from_user.id, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è {min_deposit} —Ä—É–±–ª–µ–π.", reply_markup=keyboards.markup_main())
        return

    await state.update_data(amount=amount)
    pricegolda = float(db_help.goldsc()[1])
    goldamount = amount / pricegolda

    await bot.send_message(message.from_user.id, "üíé")

    await bot.send_message(message.from_user.id, f"<b>–ó–∞ {amount} —Ä—É–±–ª–µ–π, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ {int(goldamount)} –≥–æ–ª–¥—ã</b>")

    await bot.send_message(message.from_user.id, f"""<b>üî∞ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤—ã—à–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:
üí∏ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount} ‚ÇΩ

üöÄ –û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ –≤ —á–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞:</b>""")
    await PaymentStates.screenshot.set()


@dp.message_handler(state=UserState.suma)
async def get_username(message: types.Message, state: FSMContext):
    if message.text.isdigit() == True:
        pricegolda = float(db_help.goldsc()[1])
        balnce = float(message.text)//pricegolda
        if balnce >= 50:
            balnce = float(message.text)*pricegolda
            if db_help.check_user(message.from_user.id)[4] >= balnce:
                await state.finish()
                db_help.del_gold(message.from_user.id, balnce)
                db_help.add_balance(message.from_user.id, message.text)
                await bot.send_message(message.from_user.id, f"‚úÖ <b>–í—ã –∫—É–ø–∏–ª–∏ {message.text} –≥–æ–ª–¥—ã! –ó–∞ {balnce} —Ä—É–±–ª–µ–π</b>")
                await bot.send_message(adminid, f"üîî <b>{message.from_user.id} - {message.from_user.first_name} –∫—É–ø–∏–ª - {message.text} G –ø–æ –∫—É—Ä—Å—É - {float(db_help.goldsc()[1])}, –Ω–∞ {balnce}</b>")
            else:
                await state.finish()
                await bot.send_message(message.from_user.id, f"‚ùóÔ∏è <b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!</b>", reply_markup=keyboards.exitmenu())
        else:
            await state.finish()
            await bot.send_message(message.from_user.id, f"‚ùóÔ∏è <b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ - 50 —Ä—É–±–ª–µ–π</b>")
    else:
        await state.finish()
        await bot.send_message(message.from_user.id, f"‚ùóÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>")


@dp.message_handler(content_types=types.ContentType.PHOTO, state=PaymentStates.screenshot)
async def process_screenshot(message: types.Message, state: FSMContext):

    await state.update_data(screenshot=message.photo[-1].file_id)

    data = await state.get_data()
    payment_system = data.get('payment_system')
    amount = data.get('amount')
    screenshot = data.get('screenshot')


    sql.execute('UPDATE profiles SET payment_system=?, amount=?, screenshot=? WHERE id=?',
                   (payment_system, amount, screenshot, message.from_user.id))
    db.commit()


    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{message.from_user.id}"),
        InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{message.from_user.id}")
    )

    admin_id = 6190927801 # –∞–¥–º–∏–Ω –∞–π–¥–∏
    await bot.send_message(adminid, "<b>–ü—Ä–∏—à–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µüíµ\n"
                                    "/a - –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>")


    await state.finish()

    await bot.send_message(message.from_user.id, "<b>ü´Ç–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                                                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ, –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>", reply_markup=keyboards.markup_main())



@dp.callback_query_handler(lambda c: c.data.startswith('accept:') or c.data.startswith('reject:'))
async def process_application(callback_query: types.CallbackQuery):
    action, user_id = callback_query.data.split(':')
    user_id = int(user_id)
    user = User(callback_query.from_user.id)

    if action == 'accept':
        sql.execute('SELECT * FROM profiles WHERE id=?', (user_id,))
        application = sql.fetchone()

        sql.execute('SELECT * FROM user WHERE id=?', (user_id,))
        app = sql.fetchone()

        balance = application[3]

        print(f'{user_id} –ø–æ–ø–æ–ª–Ω–∏–ª {balance}')

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sql.execute('UPDATE profiles SET cash=? WHERE id=?', (0, user_id))
        sql.execute('UPDATE profiles SET amount=? WHERE id=?', (0, user_id))

        db.commit()

        pricegolda = float(db_help.goldsc()[1])
        balanceplus = balance / pricegolda 
        db_help.add_balance(user_id, balanceplus)
        now = time.strftime('%Y-%m-%d %H:%M:%S')
        sql.execute('''
                    INSERT INTO gold_transactions (user_id, amount, date)
                    VALUES (?, ?, ?)
                    ''', (user_id, balanceplus, now))
        db.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–æ–≤–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
        await bot.send_message(user_id, "‚úÖ")
        await bot.send_message(user_id, f"<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {application[3]} —Ä—É–±–ª–µ–π –ø—Ä–∏–Ω—è—Ç–∞.–ì–æ–ª–¥–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å</b>")
    elif action == 'reject':
        sql.execute('UPDATE profiles SET cash=? WHERE id=?', (0, user_id))
        sql.execute('UPDATE profiles SET amount=? WHERE id=?', (0, user_id))

        await bot.send_message(user_id, "‚ùå")
        await bot.send_message(user_id, "<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n"
                                        "–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å—Ä–∞–∑—É –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>", reply_markup=supp_t())

    db.commit()
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(commands=['balance'])
async def cmd_balance(message: types.Message):
    sql.execute('SELECT * FROM profiles WHERE id=?', (message.from_user.id,))
    profile = sql.fetchone()
    user = User(message.from_user.id) 

    if profile is not None:
        await message.reply(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.cash}")
    else:
        await message.reply("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    db.commit()




@dp.message_handler(state=UserState.vivod)
async def get_username(message: types.Message, state: FSMContext):
    min_vivod = sql.execute("SELECT min_withdraw FROM config1").fetchone()[0]


    if message.text.isdigit() == True:
        if int(db_help.check_user(message.from_user.id)[3]) >= int(message.text):
            if int(message.text) >= int(min_vivod):
                photo = InputFile("example.jpg")
                gold = float(message.text)+float(message.text)*float(0.25)
                db_help.del_balance(message.from_user.id, message.text)
                await bot.send_photo(chat_id=message.chat.id, photo=photo, caption=f'<b>–í—ã—Å—Ç–∞–≤—å—Ç–µ —Å–∫–∏–Ω {skin} –∑–∞ {gold} –≥–æ–ª–¥—ã\n–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–∫–∏–Ω–∞ –Ω–∞ —Ä—ã–Ω–∫–µ. (–∫–∞–∫ –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏)</b>', reply_markup=ReplyKeyboardRemove())
                await state.update_data(ids=message.from_user.id, golds=gold)
                await state.update_data(golds=gold) # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ golds –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSMContext
                await UserState.screen.set()
            else:
                await state.finish()
                await bot.send_message(message.from_user.id, f"‚ùóÔ∏è <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ - {min_vivod} G!</b>", reply_markup=keyboards.exitmenu())
        else:
            await state.finish()
            await bot.send_message(message.from_user.id, f"‚ùóÔ∏è <b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–¥—ã!</b>", reply_markup=keyboards.exitmenu())
    else:
        await state.finish()
        await bot.send_message(message.from_user.id, f"‚ùóÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>", reply_markup=keyboards.exitmenu())

@dp.message_handler(commands=["a"])
@dp.message_handler(text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if message.from_user.id==adminid:
        markup = keyboards.aadmin(message.from_user.id)
        await bot.send_message(chat_id=message.chat.id, text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == 'buygolda')
async def process_buygolda(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    sql.execute('SELECT * FROM profiles WHERE payment_system IS NOT NULL AND amount IS NOT NULL AND screenshot IS NOT NULL')
    rows = sql.fetchall()

    non_zero_rows = []  # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –∑–∞—è–≤–æ–∫

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞—è–≤–∫–∏ —Å –Ω–µ–Ω—É–ª–µ–≤–æ–π —Å—É–º–º–æ–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    for row in rows:
        if row[3] != 0:
            non_zero_rows.append(row)

    if len(non_zero_rows) == 0:
        # –ï—Å–ª–∏ –∑–∞—è–≤–æ–∫ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
        await bot.send_message(callback_query.from_user.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ—Ç.")
    else:
        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∏ –µ—Å—Ç—å, –≤—ã–≤–æ–¥–∏–º –∏—Ö –≤—Å–µ
        for row in non_zero_rows:
            user_id = row[0]
            payment_system = row[2]
            amount = row[3]
            screenshot_file_id = row[4]

            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{user_id}"),
                InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user_id}")
            )

            await bot.send_photo(callback_query.from_user.id, screenshot_file_id,
                                 caption=f"–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {payment_system}\n–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount}",
                                 reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'promo_setting')
async def process_callback_promo_setting(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user_id = callback_query.from_user.id
    markup = keyboards.promo_menu(user_id)
    await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data == 'super')
async def add_gold(callback_query: CallbackQuery):
    await callback_query.answer()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–¥—ã, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Å–Ω—è—Ç—å:")
    await GoldState.amount_minus.set()

@dp.message_handler(state=GoldState.amount_minus)
async def get_user_id(message: Message, state: FSMContext):
    amount = message.text
    await state.update_data(amount=amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await GoldState.user_id_minus.set()

@dp.message_handler(state=GoldState.user_id_minus)
async def process_gold(message: Message, state: FSMContext):
    user_id = message.text
    amount = (await state.get_data())['amount']
    if message.text.isdigit():
        if amount.isdigit():
            db_help.del_balance(user_id, amount)
            await message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–æ {amount} –≥–æ–ª–¥—ã.")
            await state.finish()

        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–¥—ã –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞.")
    else:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await state.finish()



@dp.callback_query_handler(lambda c: c.data == 'start')
async def del_gold(callback_query: CallbackQuery):
    await callback_query.answer()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–¥—ã, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å:")
    await GoldState.amount_plus.set()

@dp.message_handler(state=GoldState.amount_plus)
async def get_user_id(message: Message, state: FSMContext):
    amount = message.text
    await state.update_data(amount=amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await GoldState.user_id_plus.set()

@dp.message_handler(state=GoldState.user_id_plus)
async def process_gold(message: Message, state: FSMContext):
    user_id = message.text
    amount = (await state.get_data())['amount']
    if message.text.isdigit():
        if amount.isdigit():
            db_help.add_balance(user_id, amount)
            await message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} –≥–æ–ª–¥—ã.")
            await state.finish()
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–¥—ã –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞.")
    else:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'database')
async def command_start(message: types.Message):
    await bot.send_document(chat_id=adminid, document = open('users.db', 'rb'), caption = f'   BACKUP –æ—Ç {datetime.datetime.now()}')

@dp.callback_query_handler(lambda c: c.data == 'backup')
async def command_start(message: types.Message):
     await backup()
     await message.answer('–ë–µ–∫–∞–ø —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω–∞')


@dp.message_handler(commands=["dbg"])
async def command_start(message: types.Message):
    db_help.dbgolds()

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'rate')
async def change_rate(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id == adminid:
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –∑–æ–ª–æ—Ç–∞:")
        await SetGoldRate.set_gold_rate.set()  # Set the state to input the new gold rate
    else:
        await bot.answer_callback_query(callback_query.id, text="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")


@dp.message_handler(state=SetGoldRate.set_gold_rate)
async def set_gold_rate(message: types.Message, state: FSMContext):
    if message.from_user.id == adminid:
        cours = message.text.strip()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫—É—Ä—Å–æ–º –∑–æ–ª–æ—Ç–∞ –≤ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        gold_rate = float(cours)
        
        db_help.golds(gold_rate)  # Update the gold rate in the database
        await message.answer(f'–ö—É—Ä—Å –∑–æ–ª–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω')
        await bot.send_message(adminid, f'–ù–æ–≤—ã–π –∫—É—Ä—Å –∑–æ–ª–æ—Ç–∞: {gold_rate}')  # Send confirmation message to admin
        await state.finish()
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")	

@dp.callback_query_handler(lambda c: c.data == 'back', state='*')
async def back(callback_query: types.CallbackQuery, state: FSMContext):
    # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback_query.message.answer('–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.')
    await state.finish()


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—ã–ª–∫–∞"
@dp.callback_query_handler(lambda c: c.data == 'mail')
async def send_message(callback_query: types.CallbackQuery):
    # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º "—Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π" –∏–ª–∏ "–±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏"
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton(text="–° –∫–∞—Ä—Ç–∏–Ω–∫–æ–π", callback_data="photo"), InlineKeyboardButton(text="–ë–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏", callback_data="text"))
    markup.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=markup)
    # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    await Sender.photo.set()

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–° –∫–∞—Ä—Ç–∏–Ω–∫–æ–π" –∏–ª–∏ "–ë–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(lambda c: c.data in ['photo', 'text'], state=Sender.photo)
async def send_message_type(callback_query: types.CallbackQuery, state: FSMContext):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    message_type = "—Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π" if callback_query.data == 'photo' else "–±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏"
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(message_type=message_type)
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ "—Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π"
    if callback_query.data == 'photo':
        await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        await Sender.photo.set()
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ "–±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏"
    elif callback_query.data == 'text':
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
        # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
        await Sender.text.set()

@dp.message_handler(content_types=['photo'], state=Sender.photo)
async def check_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        file_id = message.photo[-1].file_id
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
        # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ñ–æ—Ç–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data['file_id'] = file_id
        await state.set_data(data)
        # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
    await Sender.text.set()


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
@dp.message_handler(content_types=['text'], state=Sender.text)
async def send_message_text(message: types.Message, state: FSMContext):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(message.from_user.id, f"<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞</b>")

    data = await state.get_data()
    message_type = data.get('message_type')
    file_id = data.get('file_id', None)
    # video_id = data.get('video_id', None)
    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = sql.execute("select id from user").fetchall()
    receive_users = 0 # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É
    block_users = 0 # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    async def send_result():
        await bot.send_message(message.from_user.id, f"*–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞*\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–∏: *{receive_users}*\n–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏: *{block_users}*", parse_mode='Markdown')
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user in users:
        try:

            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
            if file_id:
                await bot.send_photo(user[0], file_id, caption=message.text)
            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
            else:
                await bot.send_message(user[0], message.text)
            # —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ª—É—á–∏–≤—à–∏—Ö —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            receive_users += 1
        except:
            # —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–≤—à–∏—Ö —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            block_users += 1
        # –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã Telegram API
        await asyncio.sleep(1)
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    asyncio.create_task(send_result())
    # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.finish()

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.callback_query_handler(lambda c: c.data == 'pro')
async def send_statistics(callback_query: types.CallbackQuery):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_count = db_help.get_user_count()
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    await bot.send_message(callback_query.from_user.id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {user_count}")


# ======

async def my_function():

    await bot.send_document(chat_id=adminid, document = open('users.db', 'rb'), caption = f'üîî BACKUP –æ—Ç {datetime.datetime.now()}')

async def schedule_function():
    while True:
        now = datetime.datetime.now()
        if now.hour == 0 and now.minute == 0 and now.second == 0:
            # –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ 12:00:00
            asyncio.ensure_future(my_function())
        await asyncio.sleep(1)


@dp.callback_query_handler(lambda c: c.data == 'reff')
async def process_reff_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    referals = db_help.get_referrals(user_id)[2]
    referral_link = f"https://t.me/{bot.username}?start={user_id}"
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton(text=f"üë• –†–µ—Ñ–µ—Ä–∞–ª—ã: {referals}", callback_data="dummy"))
    markup.add(InlineKeyboardButton(text="‚ùå", callback_data="exit"))
    await bot.send_message(
        callback_query.from_user.id,
        text="üèÜ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
             "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ –≤–∞—à–∏–º –¥—Ä—É–∑—å—è–º. –ï—Å–ª–∏ –í–∞—à –¥—Ä—É–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∫—É–ø–∏—Ç —É –Ω–∞—Å –≥–æ–ª–¥—É, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å –µ–≥–æ –ø–æ–∫—É–ø–æ–∫!"
             "\n\nüëá–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—èüëá"
             f"\n<code>{referral_link}</code>", reply_markup=markup,
    )

@dp.callback_query_handler(lambda c: c.data == 'buygolda')
async def process_buygolda(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    sql.execute('SELECT * FROM profiles WHERE payment_system IS NOT NULL AND amount IS NOT NULL AND screenshot IS NOT NULL')
    rows = sql.fetchall()

    if len(rows) == 0:
        # –ï—Å–ª–∏ –∑–∞—è–≤–æ–∫ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
        await bot.send_message(callback_query.from_user.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ—Ç.")
    else:
        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∏ –µ—Å—Ç—å, –≤—ã–≤–æ–¥–∏–º –∏—Ö –≤—Å–µ
        for row in rows:
            user_id = row[0]
            payment_system = row[2]
            amount = row[3]
            screenshot_file_id = row[4]

            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{user_id}"),
                InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user_id}")
            )

            await bot.send_photo(callback_query.from_user.id, screenshot_file_id,
                                 caption=f"–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {payment_system}\n–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount}",
                                 reply_markup=keyboard)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await bot.send_message(callback_query.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=aadmin(callback_query.from_user.id))

@dp.callback_query_handler(text="exit")
async def test(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text(f'‚úÖ <b>–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!‚ù§Ô∏è \n\n‚ùóÔ∏è –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª, —Ç–∞–º –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ–Ω–∫—É—Ä—Å—ã - {channel}</b>', reply_markup=keyboards.markup_main())

async def handle_newpromo_command(message: types.Message):
    # –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:")
    await NewPromoState.name.set()

@dp.message_handler(state=NewPromoState.name)
async def handle_newpromo_name(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    promo_name = message.text
    await state.update_data(name=promo_name)
    
    # –ó–∞–ø—Ä–æ—Å –ª–∏–º–∏—Ç–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π):")
    await NewPromoState.limit.set()

@dp.message_handler(state=NewPromoState.limit)
async def handle_newpromo_limit(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞
    promo_limit = int(message.text)
    await state.update_data(limit=promo_limit)
    
    # –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–¥—ã –∑–∞ –ø—Ä–æ–º–æ–∫–æ–¥
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–¥—ã, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–æ –∑–∞ –ø—Ä–æ–º–æ–∫–æ–¥:")
    await NewPromoState.gold.set()

@dp.message_handler(state=NewPromoState.gold)
async def handle_newpromo_gold(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–¥—ã –∑–∞ –ø—Ä–æ–º–æ–∫–æ–¥
    promo_gold = int(message.text)
    await state.update_data(gold=promo_gold)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    data = await state.get_data()
    promo_name = data.get('name')
    promo_limit = data.get('limit')
    promo_gold = data.get('gold')
    
    sql.execute("INSERT INTO promocodes (name, promo_limit, gold) VALUES (?, ?, ?)",
                (promo_name, promo_limit, promo_gold))
    db.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ {promo_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –õ–∏–º–∏—Ç: {promo_limit}, –≥–æ–ª–¥—ã: {promo_gold}.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'seepromo')
async def process_callback_see_promo(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user_id = callback_query.from_user.id
    promocodes = sql.execute("SELECT name, promo_limit, gold FROM promocodes").fetchall()
    if not promocodes:
        await bot.send_message(user_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
    else:
        for promo in promocodes:
            await bot.send_message(user_id, f"–ü—Ä–æ–º–æ–∫–æ–¥: {promo[0]}\n–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {promo[1]}\n–ó–æ–ª–æ—Ç–æ: {promo[2]}")

@dp.callback_query_handler(lambda c: c.data == 'delpromo')
async def process_callback_del_promo(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user_id = callback_query.from_user.id
    promocodes = sql.execute("SELECT name FROM promocodes").fetchall()
    if not promocodes:
        await bot.send_message(user_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
    else:
        markup = InlineKeyboardMarkup()
        for promo in promocodes:
            markup.row(InlineKeyboardButton(text=promo[0], callback_data=f"deletepromo_{promo[0]}"))
        await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data.startswith('deletepromo_'))
async def process_callback_delete_promo(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user_id = callback_query.from_user.id
    promo_name = callback_query.data.split('_')[1]
    sql.execute("DELETE FROM promocodes WHERE name=?", (promo_name,))
    await bot.send_message(user_id, f"–ü—Ä–æ–º–æ–∫–æ–¥ {promo_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")

@dp.callback_query_handler(text="newpromo")
async def newpromo_callback_handler(callback_query: types.CallbackQuery):
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await callback_query.answer()
    await handle_newpromo_command(callback_query.message)

@dp.callback_query_handler(lambda c: c.data == 'promo')
async def process_callback_promo(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user_id = callback_query.from_user.id
    await bot.send_message(user_id, "üéÅ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>")
    await PromoCode.EnterPromo.set()

@dp.message_handler(state=PromoCode.EnterPromo)
async def process_enter_promo(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    promo_code = message.text
    promo = sql.execute("SELECT * FROM promocodes WHERE name=?", (promo_code,)).fetchone()
    msg = await message.answer("<b>–ò—â–µ–º –ø—Ä–æ–º–æ–∫–æ–¥..</b>", parse_mode="HTML")

    time.sleep(2)
    await bot.delete_message(chat_id=message.from_user.id, message_id=msg.message_id)
    if not promo:
        await message.reply("<b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>")
        await state.finish()
        return
    elif promo[1] == '0':
        await message.reply("<b>–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π</b>")
    else:
        used_promos = sql.execute("SELECT * FROM used_promocodes WHERE user_id=? AND promo_name=?", (user_id, promo_code)).fetchall()
        if used_promos:
            await message.reply("–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥")
        else:
            gold = int(promo[2])
            db_help.add_balance(user_id, gold)
            sql.execute("UPDATE promocodes SET promo_limit=promo_limit-1 WHERE name=?", (promo_code,))
            sql.execute("INSERT INTO used_promocodes(user_id, promo_name) VALUES (?, ?)", (user_id, promo_code))
            db.commit()
            await message.reply(f"–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {gold} –∑–æ–ª–æ—Ç–∞")
    await state.finish()


async def backup():
    asyncio.create_task(schedule_function())

def setup():
    "Setup function"

    print('[BOT] Started')
    executor.start_polling(dp, skip_updates=True)



# ======


if __name__ == "__main__":
    setup()
